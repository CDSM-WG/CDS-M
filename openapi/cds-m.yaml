openapi: 3.0.0
info:
  title: CDS-M API
  description:
    bladibla
  version: "0.1.2"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

# security. Allowed methods basic (in header: Authorization: Basic ZGVtbzpwQDU1dzByZA==),
#                           bearer (in header: Authorization: Bearer <token>)
#                           Api-key (in header: X-API-Key: abcdef12345)
#                           OAuth2 and OpenId are also available
# The exact ways to authenticate will be described in a later version
security:
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []
  - OAuth: []
  - OpenId: []

tags:
  - name: use-cases
  - name: building-blocks
  - name: support

paths:
  /use-cases/{useCaseId}:
    get:
      tags:
      - use-cases
      parameters:
      - $ref: "#/components/parameters/useCaseId"
      responses:
        "200":
          description: a specific use case
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/useCase"
  /use-cases/:
    get:
      tags:
      - use-cases
      responses:
        "200":
          description: complete overview of the use cases of CDS-M
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/useCase"

  /aggregation/{name}:
    get:
      tags:
      - building-blocks
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific aggregation building-block
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/aggregationDefinition"
                
  /aggregation/:
    get:
      tags:
      - building-blocks
      responses:
        "200":
          description: all aggregation building-blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/aggregationDefinition"
  /agreement/{name}:
    get:
      tags:
      - building-blocks
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific contract building-block
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/agreementDefinition"
  /agreement/:
    get:
      tags:
      - building-blocks
      responses:
        "200":
          description: all contract building-blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/agreementDefinition"

  /archive/{name}:
    get:
      tags:
      - building-blocks
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific storage building-block
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/storageDefinition"
  /archive/:
    get:
      tags:
      - building-blocks
      responses:
        "200":
          description: all storage building-blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/storageDefinition"
                  
  /authentication/{name}:
    get:
      tags:
      - building-blocks
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific authentication building-block
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authenticationDefinition"
  /authentication/:
    get:
      tags:
      - building-blocks
      responses:
        "200":
          description: all authentication building-blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/authenticationDefinition"

  /certificates/{name}:
    get:
      tags:
      - building-blocks
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific certificate building-block
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/certificatesDefinition"
  /certificates/:
    get:
      tags:
      - building-blocks
      responses:
        "200":
          description: all certificate building-blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/certificatesDefinition"

  /processing/{name}:
    get:
      tags:
      - building-blocks
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific processing aspect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/processingDefinition"
  /processing/:
    get:
      tags:
      - building-blocks
      responses:
        "200":
          description: complete overview of the processing aspects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/processingDefinition"

  /standards/{name}:
    get:
      tags:
      - building-blocks
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific standards building-block
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/standardsDefinition"
  /standards/:
    get:
      tags:
      - building-blocks
      responses:
        "200":
          description: all standards building-blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/standardsDefinition"

  /terms-and-conditions/{name}:
    get:
      tags:
      - building-blocks
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific terms-and-conditions building-block
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/termsAndConditionDefinition"
  /terms-and-conditions/:
    get:
      tags:
      - building-blocks
      responses:
        "200":
          description: all terms-and-conditions building-blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/termsAndConditionDefinition"

  /transport/{name}:
    get:
      tags:
      - building-blocks
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific transport building-block
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transportDefinition"
  /transport/:
    get:
      tags:
      - building-blocks
      responses:
        "200":
          description: all transport building-blocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/transportDefinition"
                  
  /breaches/{name}:
    get:
      tags:
      - support
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific breach
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/breach"
  /breaches/:
    get:
      tags:
      - support
      responses:
        "200":
          description: complete overview of the breaches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/breach"                  

  /conflicts/{name}:
    get:
      tags:
      - support
      parameters:
      - $ref: "#/components/parameters/name"
      responses:
        "200":
          description: a specific conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conflict"
  /conflicts/:
    get:
      tags:
      - support
      responses:
        "200":
          description: complete overview of conflicts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/conflict"
                  
components:
  schemas:
    useCase:
      type: object
      required:
      - id
      - story
      - benefits
      - problemsSolved
      properties:
        id:
          type: string
        externalReference:
          type: string
          format: URL
        story:
          $ref: "#/components/schemas/story"
        benefits:
          $ref: "#/components/schemas/prosAndCons"
        problemsSolved:
          $ref: "#/components/schemas/prosAndCons"
        standards:
          $ref: "#/components/schemas/referenceArray"
        authorisation:
          type: array
          items:
            $ref: "#/components/schemas/authenticationDefinition"
        termsAndConditions:
          $ref: "#/components/schemas/referenceArray"
        agreements:
          $ref: "#/components/schemas/referenceArray"
        transport:
          $ref: "#/components/schemas/referenceArray"
        processing:
          $ref: "#/components/schemas/referenceArray"
        archive:
          $ref: "#/components/schemas/referenceArray"
        certificates:
          $ref: "#/components/schemas/referenceArray"
        tags:
          type: array
          items:
            type: string
            description: a dimension with a value, seperated by a semicolon e.g. mode:car

    conflict:
      type: object
      properties:
        reason:
          type: string
        breach:
          type: string
        notApplicableWhenInCombinationWith:
          type: array
          items:
            type: string
        requiredAgreements:
          type: array
          items:
            type: string
        requiredCertificates:
          type: array
          items:
            type: string
        requiredAuthentication:
          type: array
          items:
            type: string
        requiredTransport:
          type: array
          items:
            type: string
            
    breach:
      type: object
      properties:
        name:
          type: string
        externalReference:
          type: string
      
    contract:
      type: object
      properties:
        name: 
          type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/contractParameters"

    contractParameters:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        section: 
          type: string
        order: 
          type: array
          items:
            type: number

    definition:
      properties:
        type:
          type: string
        name:
          type: string
        conflicts:
          $ref: "#/components/schemas/referenceArray"

    aggregationDefinition:
      type: object
      allOf:
      - $ref: "#/components/schemas/definition"
      properties:
        dimension:
          type: string
          enum: [time, geografical]
        level:
          type: string
          enum: [quarterly, hourly, dayparts, daily, weekly, biweekly, monthly, half-yearly, yearly, postal, postal1_4, district, city, region, custom]
        customGeographicalDimension:
          type: string
          format: URL

    authenticationDefinition:
      type: object
      properties:
        standard:
          type: string
        authentications:
          type: array
          items:
            type: string

    certificatesDefinition:
      type: object
      allOf:
      - $ref: "#/components/schemas/definition"
      properties:
        requiredCertificate:
          type: string
        issuer:
          type: string

    processingDefinition:
      type: object
      allOf:
      - $ref: "#/components/schemas/definition"

    standardsDefinition:
      type: object
      allOf:
      - $ref: "#/components/schemas/definition"
      - $ref: "#/components/schemas/standard"

    termsAndConditionDefinition:
      type: object
      allOf:
        - $ref: "#/components/schemas/definition"
        - type: object
          properties:
            externalReference:
              type: string

    agreementDefinition:
      type: object
      allOf:
      - $ref: "#/components/schemas/definition"    
      - $ref: "#/components/schemas/contract"

    storageDefinition:
      type: object
      allOf:
      - $ref: "#/components/schemas/definition" 
      - type: object
        properties:
          unit:
            type: string
            enum: [hours, days, weeks, months, years]
          value:
            type: number      

    transportDefinition:
      type: object
      allOf:
      - $ref: "#/components/schemas/definition"
      - type: object
        properties:
          encryption:
           type: string
        
    standard:
      type: object
      properties:
        name: 
          type: string
        part:
          type: string
        version:
          type: string
        exchangeType:
          type: string
          enum: [API, file-based]
        sustainability:
          type: string
          enum: [A,B,C,D,E]
        privacySensitivity:
          type: string
          enum: [A,B,C,D,E]
        implementationEffort:
          type: string
          enum: [A,B,C,D,E]
        reusability:
          type: string
          enum: [A,B,C,D,E]
        interoperability:
          type: string
          enum: [A,B,C,D,E]
        mediumType: 
          type: string
          enum: [xml-file, json-file, comma-delimited-csv-file, semicolon-delimited-csv-file, pipe-delimited-csv-file, shapefile, API]
        schema:
          type: string
        refreshRate:
          type: number
          description: the number of minutes between 2 refreshes. When it is a real-time connection or API, this should be considered as 0 (always up-to-date). When it's obsolete, it is not specified.
        
        fieldModifications: 
          type: array
          items:
            $ref: "#/components/schemas/fieldModification"
  
    fieldModification:
      type: object
      properties:
        field: 
          type: string
        exception: 
          type: string
          enum: [non-rotating, removed, exposed]
        consequences: 
          type: array
          items:
            $ref: "#/components/schemas/consequence"            
    
    story:
      type: object
      properties:
        asA: 
          type: string
        iWouldLikeTo: 
          type: string
        inOrderTo: 
          type: string

    prosAndCons:
      type: array
      items: 
        type: object
        properties:
          to: 
            type: string
          items:
            type: array
            items: 
              type: string

    referenceArray:
      type: array
      items:
        type: string

    error:
      type: object

  parameters:
    useCaseId:
      in: path
      name: useCaseId
      required: true
      schema:
        type: string
      description: The ID of the use case
      example: 1324A-DFB3482-32ACD
    name:
      in: path
      name: name
      required: true
      schema:
        type: string
      description: a referencing name
      example: basic-enhanced

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes: {}
    OpenId:
      type: openIdConnect
      openIdConnectUrl: https://unknownserver/.well-known/openid-configuration

  responses:
    204NoContent:
      description: Request was successful, no content to return.
    400BadRequest:
      description: Bad request. 
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    401Unauthorized:
      description: Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    403Forbidden:
      description: The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike 401, the client's identity is known to the server.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    404NotFound:
      description: The requested resources does not exist or the requester is not authorized to see it or know it exists.
    409Conflict:
      description: The request will not be fulfilled. The request itself is legal, but the content conflicts with the server and might be stale. The user might try again after looking up the current state of the resource.

    410Gone:
      description: The requested resource is no longer available. This is permanent.
